/* Generated by: JJTree: Do not edit this line. BSHAutoCloseable.java Version 1.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=BSH,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/** Copyright 2018 Nick nickl- Lombard
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */
package bsh;

// TODO: dar uma olhada nessa classe dps
// TODO: pq esse Node é público ??
class BSHAutoCloseable extends BSHTypedVariableDeclaration {
    private static final long serialVersionUID = 1L;
    // private String typeName;
    private Class<?> type;
    // private String name;
    private AutoCloseable ths;
    // public Variable varThis;

    public BSHAutoCloseable(int id) { super(id);  }

    public Object eval(CallStack callStack, Interpreter interpreter) throws EvalError {
        // renderTypeNode();
        this.type = this.jjtGetNumChildren() > 1 ? this.evalType(callStack, interpreter) : null;
        
        // if (this.type != null && !AutoCloseable.class.isAssignableFrom(this.type))
        //     throw new EvalException("The resource type "+ this.type.getName() + " does not implement java.lang.AutoCloseable.", this, callStack);

        // this.name = this.getDeclarators()[0].name;

        // we let BSHTypedVariableDeclaration do the heavy lifting

        // TODO: um BSHAutoCloseable pode ter mais de um VariableDeclartion ? verificar isso!!!!

        final Object _ths = super.eval(callStack, interpreter);
        if (!(_ths instanceof AutoCloseable))
            throw new EvalException("The resource type "+ this.type.getName() + " does not implement java.lang.AutoCloseable.", this, callStack);

        this.ths = (AutoCloseable) _ths;

        // try {
        // this.varThis = callstack.top().getVariableImpl(this.getName(), true);
        // } catch (UtilEvalError e) {
        //     throw e.toEvalError("Unable to evaluate the try-with-resource "
        //         + this.getName() + ". With message:" + e.getMessage(),
        //         this, callstack);
        // }

        return Primitive.VOID;
    }

    // public String getName() {
    //     return name;
    // }

    public void close() throws Throwable {
        // if (null != this.varThis)
        //    this.ths = (AutoCloseable) this.varThis.getValue();
       if (null != this.ths)
           this.ths.close();
    }

    // public Class<?> getType() {
    //     return this.type;
    // }

}
