<section>
<name>Scripted Event Handling</name>

One of the most powerful features of Bsh is the ability to script event 
handlers and other interface types.
To do this simply define the appropriate methods in your script or scripted
object and use the corresponding 'this' reference.

For example, we could could script an event handler for a button like so:

<example>
button = new java.awt.Button("foo!");

actionPerformed( event ) {
	print( event );
}

button.addActionListener( this );
frame( button );  // show it
</example>

Now when ActionEvents are fired by the button, your actionPerformed()
method will be invoked.  The bsh 'this' reference implements 
the interface and directs them to the appropriately named method, if it exists.
<p/>

But you don't have to define all of your interface methods globally.
You can get callbacks in any bsh object scope.  For example, the following
method creates a button that displays a message when pushed:
<p/>

<example>
messageButton( message ) {
	b = new Button("Press Me");
	b.addActionListener( this );
	frame(b);
 
	actionPerformed( e ) {
		print( message );
	}
}

messageButton("Hey you!");
messageButton("Another message...");
</example>

The above will create two buttons and each will display its own message
when pushed.  Each has a separate instance of the event handler object.
Note too that we could return a 'this' reference from the handler method and
use it in other contexts to register listeners...  
<p/>

<h2>Anonymous inner class style</h2>

More generally you can use the Java anonymous inner class style syntax
to construct a scripted object implementing an interface:
<p/>

<example>
buttonHandler = new ActionListener() {
	actionPerformed( event ) { 
		print(event);
	}
};
</example>
<p/>


See also <a href="examples/dragtext.html">the dragText example</a>.
<p/>

<h2>
Details
</h2>

<em>What happens if I don't implement all of the methods of an interface?</em>
<p/>
You can implement the special method <em>invoke()</em> which will be called
when a method of the interface is not found. e.g.
<p/>

<example>
mouseHandler = new MouseListener() {
	mousePressed( event ) { 
		print("mouse button pressed");  
	}

	invoke( method, args ) { 
		print("Undefined method of MouseListener interface invoked:"
			+ name +", with args: "+args
		);
	}
};
</example>
<p/>

<em>What kind of events can bsh handle in this way?</em>
<p/>

When running under JDK1.3 or greater BeanShell can handle any kind of event
(serve as any kind of event listener) because bsh scripts are capable of
implementing arbitrary Java interfaces.  However when running under JDK1.2
(or JDK1.1 + Swing) only the core AWT and Swing interfaces are available.
In the pre-JDK1.3 case the bsh.This object implements these interfaces
(along with Runnable, etc.) directly.
<p/>

</section>
