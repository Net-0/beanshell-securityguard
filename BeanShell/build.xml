<!--
	Ant build file for BeanShell
	http://www.beanshell.org/

	Uses Ant 1.3
	http://www.apache.org/

	Ant questions -

		- Why can't I nest filesets?  This seems like it would be so easy and
		useful...

		- Why does a fileset cause an error if the target directory does not
		exist...  This seems wrong, the set should be empty.  And we can't 
		control the order of evaluation by wrapping the fileset in a target
		because they won't accept them... e.g. I can't make a target that sets
		up the build dir!  It has to be done manually the first time (or put
		in the jar file). There must be a way to fix this...
-->
<project name="beanshell" default="compile" basedir=".">

<!-- Project Configuration -->

	<property name="version" value="1.1a13"/>
	<property name="deprecation" value="off"/>

	<!-- choose an alternate compiler -->
	<!-- 
		<property name="build.compiler" value="jikes"/> 
		<property name="build.compiler" value="classic"/> 
	-->

	<property name="src-dir" value="src" />
	<property name="test-src-dir" value="tests/classes" />
	<property name="build-dir" value="classes" />
	<property name="javadoc-dir" value="javadoc" />

	<property name="javacc-lib" 
		value="/pkg/javacc/bin/lib/JavaCC.zip"/>
	<!--property name="javacc-lib" 
		value="/home/niemeyp/pkg/javacc/bin/lib/JavaCC.zip"/-->

	<!-- 
		Optional things you can't build under older versions of Java.
		I think we can automate this in ant... deal with it later.
	-->
	<property name="excludes-1.2" 
		value="bsh/XThis.java,bsh/util/ClassBrowser.java"/>

	<!-- Uncomment to build under JDK1.2 without warnings 
	<property name="excludes" value="${excludes-1.2}"/>
	-->

	<property name="javadoc-jar" value="javadoc.jar"/>
	<property name="core-jar" value="bsh-core-${version}.jar"/>
	<property name="src-jar" value="bsh-${version}-src.jar"/>
	<property name="all-jar" value="bsh-${version}.jar"/>
	<property name="commands-jar" value="bsh-commands-${version}.jar"/>
	<property name="classpath-jar" value="bsh-classpath-${version}.jar"/>
	<property name="util-jar" value="bsh-util-${version}.jar"/>


<!-- Begin Targets -->

	<!-- This is annoying... why aren't the javacc targets smarter? -->
	<target name="checkjjt">
		<uptodate property="jjtree.notRequired" 
				targetfile="${src-dir}/bsh/bsh.jj"
		>
			<srcfiles dir="${src-dir}/bsh" includes="bsh.jjt"/>
		</uptodate>
	</target>
	<target name="checkjj">
		<uptodate property="javacc.notRequired" 
				targetfile="${src-dir}/bsh/Parser.java"
		>
			<srcfiles dir="${src-dir}/bsh" includes="bsh.jj"/>
		</uptodate>
	</target>

	<!-- Create bsh.jj when bsh.jjt changes. -->
	<target name="jjtree" unless="jjtree.notRequired" depends="checkjjt">
		<java classname="COM.sun.labs.jjtree.Main"
			fork="yes"
			failonerror="yes"
			classpath="${javacc-lib}"
	>
			<arg 
				line="-OUTPUT_DIRECTORY=${src-dir}/bsh ${src-dir}/bsh/bsh.jjt"/>
		</java>
	</target>

	<!-- Create Parser.java when bsh.jj changes. -->
	<target name="javacc" unless="javacc.notRequired" depends="checkjj">
		<java classname="COM.sun.labs.javacc.Main"
			fork="yes"
			failonerror="yes"
			classpath="${javacc-lib}"
		>
			<arg line="-OUTPUT_DIRECTORY=${src-dir}/bsh ${src-dir}/bsh/bsh.jj"/>
		</java>
	</target>

	<target name="compile" depends="jjtree,javacc,builddir">
		<javac srcdir="${src-dir}:${test-src-dir}"
			destdir="${build-dir}"
			deprecation="${deprecation}"
			optimize="off"
			includes="**/*.java"
			excludes="${excludes}"
		/>

		<!-- install the bsh commands -->
		<!-- install the util/lib stuff -->
		<copy todir="${build-dir}">
			<fileset dir="${src-dir}">
			<patternset refid="commands-bsh-patternset"/>
			<patternset refid="util-lib-patternset"/>
			</fileset>
		</copy>
	</target>


	<target name="javadoc" depends="compile">
		<mkdir dir="${javadoc-dir}" />
		<javadoc packagenames="bsh,bsh.util,bsh.classpath"
			 sourcepath="${src-dir}"
			 destdir="${javadoc-dir}"
			 author="true"
			 version="true"
			 use="true"
			 windowtitle="BeanShell"
			 doctitle="&lt;h1&gt;BeanShell&lt;h1&gt;"
			 bottom="&lt;em&gt;&#169; 2000 pat@pat.net :-)&lt;/em&gt;"
		/>
		<jar jarfile="${javadoc-jar}" basedir="${javadoc-dir}"/>
	</target>

	<!-- Jar target setup -->

	<target name="clean">
		<!-- 
			I'd like to remove the classes dir itself, but ant won't let
			me.  The filset targets above will error out if the dir doesn't
			exists... even before they are ever referenced.
		-->
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${build-dir}" includes="**/*"/>
		</delete>

		<delete quiet="true" dir="${javadoc-dir}"/>
		<delete file="${javadoc-jar}"/>

		<delete quiet="true" file="${src-jar}"/>
		<delete quiet="true" file="${core-jar}"/>
		<delete quiet="true" file="${all-jar}"/>
		<delete quiet="true" file="${util-jar}"/>
		<delete quiet="true" file="${classpath-jar}"/>
		<delete quiet="true" file="${commands-jar}"/>
	</target>

	<!-- This doesn't work!  I can find no way to set up the dir before the
		filesets error out, short of including them in the jar file  -->
	<target name="builddir">
		<mkdir dir="${build-dir}" />
	</target>

	<fileset id="core-fileset" dir="${build-dir}">
		<patternset>
			<include name="bsh/*.class"/>
		</patternset>
	</fileset>

	<fileset id="classpath-fileset" dir="${build-dir}">
		<patternset>
			<include name="bsh/classpath/*.class"/>
		</patternset>
	</fileset>

	<fileset id="commands-fileset" dir="${build-dir}">
		<patternset>
			<include name="bsh/commands/*.class"/>
		</patternset>
		<patternset id="commands-bsh-patternset">
			<include name="bsh/commands/*.bsh"/>
			<exclude name="CVS"/>
		</patternset>
	</fileset>

	<fileset id="util-fileset" dir="${build-dir}">
		<patternset>
			<include name="bsh/util/*.class"/>
			<exclude name="bsh/util/AWTConsole*"/>
		</patternset>
		<patternset id="util-lib-patternset">
			<include name="bsh/util/lib/*"/>
			<exclude name="CVS"/>
		</patternset>
	</fileset>

	<!-- Jar targets -->

	<target name="jarcore" depends="compile">
		<delete file="${core-jar}"/>
		<jar jarfile="${core-jar}" manifest="src/Manifest.interp">
			<fileset refid="core-fileset"/>
		</jar>
	</target>

	<target name="jarall" depends="compile">
		<delete file="${all-jar}"/>
		<jar jarfile="${all-jar}" manifest="src/Manifest.console">
			<fileset refid="core-fileset"/>
			<fileset refid="classpath-fileset"/>
			<fileset refid="util-fileset"/>
			<fileset refid="commands-fileset"/>
		</jar>
	</target>

	<target name="jarsrc">
		<delete file="${src-jar}"/>
		<jar jarfile="${src-jar}">
			<fileset dir="${basedir}/..">
				<patternset>
					<include name="BeanShell/**/*"/>
					<exclude name="BeanShell/classes/**/*"/>
					<exclude name="BeanShell/*javadoc*"/>
					<exclude name="**/CVS"/>
					<exclude name="**/*.jar"/>
				</patternset>
			</fileset>
		</jar>
	</target>

	<!-- Make the rest of the nitty gritty dist jars -->
	<target name="dist" depends="compile,jarcore,jarall,javadoc,jarsrc">
		<delete file="${commands-jar}:${classpath-jar}:${util-jar}"/>

		<jar jarfile="${commands-jar}">
			<fileset refid="commands-fileset"/>
		</jar>
		<jar jarfile="${classpath-jar}">
			<fileset refid="classpath-fileset"/>
		</jar>
		<jar jarfile="${util-jar}">
			<fileset refid="util-fileset"/>
		</jar>
	</target>

</project>
